# Usage:
#
# 1) Get OMEGACEN_CREDENTIALS from https://metis.strw.leidenuniv.nl/wiki/doku.php?id=ait:archive
# export OMEGACEN_CREDENTIALS=username:password
#
# 2) Build the image
# podman build --secret=id=OMEGACEN_CREDENTIALS,type=env -t metis_head .
#
# 3) Run the image
# podman run  -it --network=host --volume="/:/hostroot" --volume="${XAUTHORITY:-$HOME/.Xauthority}:/home/metis/.Xauthority:ro"   --env DISPLAY="${DISPLAY}" metiswise

FROM quay.io/condaforge/miniforge3:25.3.0-3
# /opt/conda/lib/python3.12 is hardcoded in some (dbviewer) scripts, so update those if necessary.

MAINTAINER Hugo Buddelmeijer <hugo@buddelmeijer.nl>

# Run-time dependencies:
# - postgresql: for psql to connect to the database manually
#
# Build dependencies:
#
# Development dependencies:
# -
#
# Optional dependencies for convenience:
# - x11-apps: for xclock to test X11 connection
# - emacs: to use as EDITOR
# - file less curl vim man-db meld tmux inetutils-ping
RUN \
    apt-get update; \
    apt-get upgrade -y; \
    apt-get install -y \
        build-essential \
        pkg-config \
        postgresql \
        wget gcc  automake autogen libtool gsl-bin libgsl-dev libfftw3-bin libfftw3-dev fftw-dev \
        curl bzip2 subversion git cppcheck lcov valgrind \
        zlib1g zlib1g-dev \
        liberfa1 liberfa-dev \
        libcurl4-openssl-dev libcurl4 \
        less man-db x11-apps apt-file inetutils-ping \
        tmux ripgrep file \
        libcfitsio-bin libcfitsio-dev \
        wcslib-dev wcslib-tools \
        perl cmake \
        graphviz meld \
        emacs vim nano;

# Install
# - cpl: easy from conda
# - git: newest version allows --revision
RUN \
    conda config --add channels conda-forge; \
    conda install -y cpl git;

# Setting CPLDIR is necessary to install pycpl
ENV CPLDIR=/opt/conda


RUN --mount=type=secret,id=OMEGACEN_CREDENTIALS \
    pip install \
    --extra-index-url "https://$(cat /run/secrets/OMEGACEN_CREDENTIALS)@pip.entropynaut.com/packages/" \
    "commonwise==2025.8.0a0"

# TODO: Hardcode specific versions.
RUN pip install \
    --extra-index-url https://ftp.eso.org/pub/dfs/pipelines/libraries \
    pycpl \
    pyesorex \
    edps \
    adari_core

# Create a directory where to checkout the repositories.
# This directory can then be mounted over in the development environment.
RUN mkdir -p /root/repos
WORKDIR /root/repos


# Clone all METIS projects
RUN \
    git clone https://github.com/AstarVienna/ScopeSim ; \
    git clone https://github.com/AstarVienna/ScopeSim_Templates ; \
    git clone https://github.com/AstarVienna/ScopeSim_Data ; \
    git clone https://github.com/AstarVienna/irdb ; \
    git clone https://github.com/AstarVienna/METIS_DRLD ; \
    git clone https://github.com/AstarVienna/METIS_Simulations ; \
    git clone https://github.com/AstarVienna/METIS_Pipeline ; \
    git clone https://github.com/AstarVienna/METIS_Pipeline_Test_Data ; \
    git clone https://github.com/AstarVienna/MetisWISE ;

# Install all METIS projects.
# METIS_Simulations / ScopeSim_Templates / ScopeSim should be installed in
# this order because otherwise they might install different versions of
# each other. \
RUN \
    pip install -e METIS_Simulations ; \
    pip install -e ScopeSim_Templates ; \
    pip install -e ScopeSim ; \
    pip install -e MetisWISE ; \
    pip install -e ScopeSim_Data ;

RUN bash "${HOME}/repos/METIS_Pipeline/toolbox/create_config.sh"; \
    ln -s "${HOME}/irdb" "${HOME}/repos/METIS_Simulations/Simulations/inst_pkgs"

ENV AWETARGET metiswise

ENV PYESOREX_PLUGIN_DIR "/root/repos/METIS_Pipeline/metisp/pymetis/src/pymetis/recipes"
ENV PYCPL_RECIPE_DIR "/root/repos/METIS_Pipeline/metisp/pyrecipes/"

# TODO: Ensure that it is not necessary to set the PYTHONPATH at all
ENV PYTHONPATH "/root/repos/METIS_DRLD:/root/repos/METIS_Pipeline/metisp/pymetis/src/:/root/repos/MetisWISE"

# TODO: Replace with the large data?
ENV SOF_DATA "/root/repos/METIS_Pipeline_Test_Data/metis_sim_small_1/data"
ENV SOF_DIR "/root/repos/METIS_Pipeline_Test_Data/metis_sim_small_1/sof"

WORKDIR "/root"
