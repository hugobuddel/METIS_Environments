# This is the configuration file for an Astro-Wise HTTP/HTTPS server
#
# The configuration file is divided into sections which have name=value pairs
# The configuration file is parsed with the python class ConfigParser
#
# Notice that :
# * All comment lines start with # or ;
# * The variable names are case sensitive, values not
# * All single and double quotes are stripped from the values, quotes are optional
#
# Please note that to make use of this configuration file make a copy and edit
# Only change the version in cvs if new configuration options are added,
# do NOT edit the version in cvs to configure your http server !
#
# WJ Vriend : wjvriend(at)astro(dot)rug(dot)nl

[global]
# the global section sets the values for global variables

# logging (is not fully implemented)
verbose         = 0

# log all sql statements (is not fully implemented)
SQL_log         = 0

# log performance (duration) of every request
performance     = 1

# the default_service is the default service, returned when the user does not specify any service
# this service must be present in the services section
;default_service = 'AWE'
default_service = 'DbView'

# The addres to bind to, default it will bind to all available interfaces
bindaddr        = ''

# If the url to access the service is different from the bindaddr, specify here
access_url      = ''

# port is the port number the server process listens on
port            = 8089

# domain is the domain name this server is running on,
# this is used to set the scope of cookies
# example : astro-wise.org
domain          = ''

# server is the server name, this is used to identify the service in the framework
# cookie names will contain this value
# preferable this should be the same as the start-stop script, so local-server.sh
# DO NOT use "#" in the server name
server          = 'metis-server'

# version is a string stating the version, for production make empty
version         = ''

# A custom worker thread that is started periodically to do work
# For example cleaning up the log dir :
worker_thread = common.services.general.HttpCleanup:Cleanup

# The class handling the requests, default myHttpRequestHandler will be used
# Only specify if a custom or derived class is used
#request_handler = 'common.services.general.myHttpRequestHandler:myHttpRequestHandler'

# The class handling feedback to the user of unhandled exceptions
error_handler = 'common.services.general.HtmlError:HtmlError'

# This defines the class to handle http file requests
# Override this class to implement custom http file request handling
# if left empty, the default HttpFileRequest handler class is used
file_request_handler = 'common.services.general.HttpFileRequest:HttpFileRequest'
# Similar as file request, but this class handles directories, default not enabled
#dir_request_handler = 'common.services.general.HtmlDir:HtmlDir'
dir_request_handler =

# email adress of the owner/maintainer of this service
# this email adress will be used to send the error file once a day in case of errors
owner_mail      = ''

# (expert option) To use a custom parse_multipart method specify the name here and implement in my_parse_multipart.py
# When not set cgi.parse_multipart(...) will be used
# currently implemented : progress_parse_multipart, parse_multipart_to_file
my_parse_multipart = ''

# The class used to instantiate the server, value can be threaded (default) or forked
#   threaded SecureThreadedXmlRpcServer
#   forked   SecureForkedXmlRpcServer
server_type     = 'threaded'

# The HTTP protocol, examples:
#     HTTP/1.0
#     HTTP/1.1 (default)
# Leave defined but empty for value defined in BaseHTTPRequestHandler
protocol_version = 'HTTP/1.1'

# If set to any value, this will be the default socket timeout (as float, in seconds)
socket_timeout :

# Max children the forking server will spawn simultaneous
forking_max_children : 100

# The socket queue size, this will be set on the TCPServer class, which will be used as argument for socket.listen()
# leave empty for the default in TCPServer, set to an int for a specific queue size
# and SOMAXCONN for the value defined in socket.SOMAXCONN
request_queue_size :

# This config value will be send as HTTP Header entry named Server
# the string part {default} will be replaced with base class (generated) value
# when not present in the config file (or commented out) the base class value will be send
version_string : WiseService/1.0 {default}

[log]
# these options specify how the logging is done, all values are 0 or 1
# Create a log file per user
log_per_user    = 1
# Create a log file per day
log_per_day     = 1
# Use the client address in the prefix string for the filename
log_prefix_address = 0
# Use the client address in the prefix string for the filename for user AWANONYMOUS
log_prefix_address_awanonymous = 1
# Create a log file per ip address (this does not work in combination with options above)
#log_per_ip = 1

# switch when error log is mailed, 0 mail daily if any error, 1 mail when new error found
mail_errors_immediately = 0

[dir_list]
# directory definitions
debug_dir = 'debug'
# stats_dir will be obsolete, statistics are stored in sqlite3 db, see http_db in [file_list]
stats_dir = 'stats'
sessions_dir = '.Sessions'
# virtual_root is the only directory from which files will be served
# when set the access_list section is ignored and files should be
# referenced relative from the virtual_root, to include the common
# repository define a link from static/common to the common repository.
# TODO: Fix this virtual_root, e.g. set it automatically.
#virtual_root = /home/metis/
virtual_root = /opt/conda/lib/python3.12/site-packages

[file_list]
# file definitions
# file for dumping less interesting log
dump_log      = 'dump.log'
# statistic file, if set to empty no statistics are gathered
# will become obsolete, see http_db in [file_list]
stats_file    = 'http_server.stats'
# Filename for storing login sessions (only applicable when ssl enabled)
# 2 files will be stored in the sessions_dir; the Sessions in clear text as <sessions_file>.dump and as pickle <sessions_file>.pickle
# 1 file will be stored in the debug dir; <session_file>.log
sessions_file = 'Sessions'
# sqlite database with statistics, leave empty for no database
http_db       = 'http.db'

[http_db]
# when http_db is defined in file_list section
# either specify the http_db_max_requests (maximum nr of requests will be kept)
keep_requests     = 1000
# or the http_db_max_age_requests; maximum age in seconds of the stored requests
max_age_requests = 0
# when both are 0 the requests will be stored forever

[access_list]
# List of directories and files which are allowed to be served by the server.
# Name of each item should start with 'allowed' followed by an unqiue number.
# Value of each item is the directory or file to be served.
# Paths can be absolute (starting with /), or relative from work dir (not starting with /)
# Environment variables like ${AWEPIPE} can be used, these will be expanded upon start of the service.
# !! if virtual_root is defined, the allowedX are ignored !!
allowed1 = '/change/me'
allowed2 = ${AWEPIPE}/common/services/javascript
allowed3 = ${AWEPIPE}/common/services/calts/static
allowed4 = ${HOME}/robots.txt

[host_mapping]
# Mapping between host and service, specified as :
#  host = service
# For example, if gowise.astro-wise.org/ is requested this is interpreted as
# gowise.astro-wise.org/GoWISE. This can be used for web services which do not
# have a seperate process (and so a ip/port), but have a seperate url. This way
# you can use the url without specifiying the service.
awe = 'AWE'

[ssl]
# For https server a ssl section MUST be specified
# one or more certificate files must be specified
# Set use_ssl to you yes if server should be https
use_ssl      = 'yes'
# See common/services/general/myHttpServer.py howto generate self signed certificates
certificates = '/root/certificate/localhost_selfsigned.crt'
key          = '/root/certificate/localhost_selfsigned.key'
# A image and url can be specified to link to the certificate authority, validating the certificate
https_img    = ''
https_url    = ''
# The ciphers to use, default only strong ciphers are enabled
# Set empty to leave the choice of ciphers to the underlying ssl implementation
ciphers      = 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH'
# The timeout of the ssl handshake, 0 or empty no timeout, > 0 timeout on handshake is enforced
timeout      = 0

[headers]
# Entries defined here will be send as HTTP header
# These entries are static, use HtmlBase.getAdditionalHeaders() to generate header entries
# Example:
# User-Agent = ItsMe

[limits]
# limits, for example max disk space usage

[timings]
# timings of actions and objects, if not specified in seconds

# timing of the HttpTimer work thread, seconds to sleep before next action
work_time     = 300

# the xxx_log_age timings apply only to the debug_dir directory, for other directories use the d__xxx below
# max age in days (since creation) for the log files that will be kept longer
long_log_age  = 100
# max age in days (since creation) for the log files that will be kept shorter
# this applies to log files of bot sessions
short_log_age = 1
# age in days of the main log files, these should be called like service-name.log.21042023T083412.save (empty value or 0 disables)
# this will also clean dump.log and ThreadedLog.log saved files
main_log_age = 50
# these specify per directory listed in dir_list when to clean up, name should d__<dir_name>
# if there cannot be a distinction made between short or long, then long is the default
# negative values disable the deletion
#                timing for
# dir_name     = short, long, dir entry
d__debug_dir   = 1    , 100 , -1

[services]
# the services section couples the requested URL to generation classes
# the format : request = module:class
# where request is the path part in the url : http://domain_name/path
# and module the file where the class is defined for the html generation
#
# the global configuration file (in CVS) lists all the possible services
# see $AWEPIPE/common/services/general/HttpServer.cfg
# Use a custom version of this file, so copy this file somewhere local and run the HttpServer with
# the -c option pointing to the custom file
# common services
#DBinfo              = 'common.services.general.HtmlDBinfo:HtmlDBinfo'
DmView              = 'common.services.dmview.HtmlDmView:HtmlDmView'
#AWE                 = 'common.services.prompt.HtmlAWEprompt:HtmlAWE'
#Config              = 'common.services.general.HtmlConfig:HtmlConfig'
#ConfigStats         = 'common.services.general.HtmlConfig:HtmlConfigStats'
#Error               = 'common.services.general.HtmlError:HtmlError'
#Projects            = 'common.services.general.HtmlProjects:HtmlProjects'
#MultipleUrls        = 'common.services.general.TextMultipleUrls:TextMultipleUrls'
DbView              = 'common.services.dbview.HtmlDbView:HtmlDbView'
#Dir                 = 'common.services.general.HtmlDir:HtmlDir'
#Session             = 'common.services.https.XmlSession:XmlSession'
#Test                = 'common.services.general.HtmlTest:HtmlTest'
# other common services, uncomment to use
Login            = common.services.https.HtmlLogin:HtmlLogin
#Password         = common.services.https.HtmlPassword:HtmlPassword
#Gpfs             = common.services.general.HtmlGpfs:HtmlGpfs
# astro services, uncomment to use
#CalEdit             = astro.services.calts.HtmlCalibrationEdit:HtmlCalibrationEdit
#CalList             = astro.services.calts.HtmlCalibrationQuality:HtmlCalibrationQuality
#Comment             = astro.services.calts.HtmlComment:HtmlComment
#DbView              = astro.services.dbview.HtmlDbView:HtmlDbView
#DependencyCutout    = astro.services.imageview.HtmlDependencyCutout:HtmlDependencyCutout
#Fits                = astro.services.general.HtmlFits:HtmlFits
#GMap                = astro.services.skymap.HtmlGMap:HtmlGMap
#GMapQuery           = astro.services.skymap.GMapQuery:GMapQuery
#GoWISE              = astro.services.gowise.HtmlGoWise:HtmlGoWise
#GoWISEOverview      = astro.services.gowise.HtmlGoWiseOverview:HtmlGoWiseOverview
#Process             = astro.services.process2.HtmlProcess:HtmlProcess
#Process2            = astro.services.process2.HtmlProcess:HtmlProcess
#QualityWISE         = astro.services.qualitywise.HtmlQualityWISE:HtmlQualityWISE
#RadioView           = astro.services.general.HtmlRadioView:HtmlRadioView
#RgbMaker            = astro.services.imageview.HtmlRgbMaker:HtmlRgbMaker
#Wenss               = astro.services.general.HtmlWenss:HtmlWenss
# other non-astro services, uncomment to use
#Lofar               = awlofar.services.archive.HtmlLofarArchive:HtmlLofarArchive
#DbViewLofar         = awlofar.services.dbview.HtmlDbView:HtmlDbView
#GenotypeAnalysis    = lifewise.services.pilot.HtmlGenotypeAnalysis:HtmlGenotypeAnalysis
